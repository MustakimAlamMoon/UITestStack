// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Steam.Framework.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Steam")]
    [NUnit.Framework.FixtureLifeCycleAttribute(NUnit.Framework.LifeCycle.InstancePerTestCase)]
    public partial class SteamFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Framework/Features", "Steam", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Steam.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Privacy Policy")]
        [NUnit.Framework.TestCaseAttribute("English", null)]
        [NUnit.Framework.TestCaseAttribute("Spanish - Spain", null)]
        [NUnit.Framework.TestCaseAttribute("French", null)]
        [NUnit.Framework.TestCaseAttribute("German", null)]
        [NUnit.Framework.TestCaseAttribute("Italian", null)]
        [NUnit.Framework.TestCaseAttribute("Russian", null)]
        [NUnit.Framework.TestCaseAttribute("Japanese", null)]
        [NUnit.Framework.TestCaseAttribute("Portuguese - Portugal", null)]
        [NUnit.Framework.TestCaseAttribute("Portuguese - Brazil", null)]
        public async System.Threading.Tasks.Task VerifyPrivacyPolicy(string languages, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Languages", languages);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify Privacy Policy", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
    await testRunner.GivenAsync("Main page is open", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
    await testRunner.WhenAsync("I scroll and open Privacy Policy", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 6
    await testRunner.ThenAsync("Privacy Policy page is opened in new tab", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 7
    await testRunner.AndAsync("Switch language elements list displayed", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
    await testRunner.AndAsync(string.Format("Supported languages {0}", languages), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 9
    await testRunner.AndAsync("Policy revision signed in the current year", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Browse and Filter Products")]
        public async System.Threading.Tasks.Task BrowseAndFilterProducts()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Browse and Filter Products", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 26
    await testRunner.GivenAsync("Main page is open", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 28
    await testRunner.WhenAsync("I click on \'Top Sellers\' option in the \"BROWSE CATEGORIES\" section of the left me" +
                        "nu", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("the page with Top Sellers products is open", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 31
    await testRunner.WhenAsync("I move the handle of the slider in the \'Narrow by Price\' section to the \"Under $1" +
                        "0.00\" position", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
    await testRunner.ThenAsync("the price range under the slider shows the text \"Under $10.00\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Narrow by tag",
                            "Narrow by OS"});
                table1.AddRow(new string[] {
                            "Puzzle",
                            "SteamOS + Linux"});
                table1.AddRow(new string[] {
                            "2D",
                            ""});
                table1.AddRow(new string[] {
                            "Fantasy",
                            ""});
#line 34
    await testRunner.WhenAsync("I select the following filters in the right menu", ((string)(null)), table1, "When ");
#line hidden
#line 40
    await testRunner.ThenAsync("all 4 checkboxes are checked", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 41
    await testRunner.AndAsync("the number of results matching the search equals the number of games in the games" +
                        " list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
    await testRunner.WhenAsync("I get the first game\'s name, release date, and price from the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 44
    await testRunner.AndAsync("I click on the first game in the list", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
    await testRunner.ThenAsync("the page with the game\'s description is opened", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 46
    await testRunner.AndAsync("the game\'s name, release date, and price are equal to the ones from previous step" +
                        "", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
